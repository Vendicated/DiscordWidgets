---
import {
    getUser,
    getUserAvatar,
    getUserBanner,
    getUserFlags,
    isPomelod,
} from "../discord_api";
import { hexColorRegex, numToHexColor } from "../utils";

const id = Astro.url.searchParams.get("id");
if (!id) return new Response("Missing id parameter", { status: 400 });

const theme = Astro.url.searchParams.get("theme");

const user = await getUser(Astro.request, id).catch(e => {});
if (!user) {
    const bodyStyle =
        theme === "light"
            ? "background: white; color: black;"
            : "background: black; color: white;";

    return new Response(
        `
        <!DOCTYPE html>
        <style>
            body { margin: 0; padding: 16px; font: system-ui, sans-serif; ${bodyStyle} }
            h1, p { margin: 0; }
            h1 { margin-bottom: 8px; }
            a { color: red; }
        </style>
        <h1>User not found</h1>
        `,
        { status: 200, headers: { "Content-Type": "text/html" } }
    );
}

const roundedCorners =
    Astro.url.searchParams.get("rounded-corners") !== "false";
const fulllBanner = Astro.url.searchParams.get("full-banner") === "true";
const showBanner = Astro.url.searchParams.get("banner") !== "false";
const showIcon = Astro.url.searchParams.get("discord-icon") === "true";
const showFlags = Astro.url.searchParams.get("badges") === "true";
const guessNitro = Astro.url.searchParams.get("guess-nitro") === "true";

let style = "";
for (const key of ["background-color", "foreground-color"]) {
    const value = Astro.url.searchParams.get(key);
    if (!value) continue;

    if (!hexColorRegex.test(value))
        return new Response(`Invalid color parameter ${key}=${value}`, {
            status: 400,
        });

    style += `--${key}: ${value};`;
}

const avatarUrl = getUserAvatar(user);
const bannerUrl = getUserBanner(user);

const bg =
    user.accent_color != null
        ? numToHexColor(user.accent_color)
        : user.banner_color || "var(--background-color)";

if (import.meta.env.PROD)
    Astro.response.headers.set(
        "Cache-Control",
        "public, max-age=300, s-maxage=300"
    );
---

<html>
    <head>
        <meta charset="utf-8" />

        <title>{user.username}'s Discord profile</title>

        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width" />
    </head>

    <body
        class:list={{
            "theme-light": theme === "light",
            "theme-dark": theme !== "light",
            "rounded-corners": roundedCorners,
            "full-banner": fulllBanner,
            "no-banner": !showBanner,
        }}
        style={style}
    >
        <div class="root">
            {
                showBanner && (
                    <div class="banner">
                        {bannerUrl && <img src={bannerUrl} alt="" />}
                        <div class="color-banner" style={{ background: bg }} />
                    </div>
                )
            }
            <div class="profile">
                <img class="avatar" src={avatarUrl} alt="" />
                <div class="userinfo">
                    <p class="username">
                        {
                            user.global_name +
                                (isPomelod(user)
                                    ? ""
                                    : "#" + user.discriminator)
                        }
                    </p>
                    {
                        showFlags && (
                            <div class="flags">
                                {getUserFlags(user, guessNitro).map(flag => (
                                    <img
                                        src={`/assets/badges/${flag
                                            .replaceAll(" ", "-")
                                            .toLowerCase()}.png`}
                                        title={`${flag}`}
                                    />
                                ))}
                            </div>
                        )
                    }
                </div>
                {
                    showIcon && (
                        <svg
                            viewBox="0 0 640 512"
                            role="img"
                            fill="var(--foreground-color)"
                        >
                            <title>Discord</title>
                            <path
                                fill="currentColor"
                                d="M524.531 69.836a1.5 1.5 0 0 0-.764-.7A485.065 485.065 0 0 0 404.081 32.03a1.816 1.816 0 0 0-1.923.91 337.461 337.461 0 0 0-14.9 30.6 447.848 447.848 0 0 0-134.426 0 309.541 309.541 0 0 0-15.135-30.6 1.89 1.89 0 0 0-1.924-.91 483.689 483.689 0 0 0-119.688 37.107 1.712 1.712 0 0 0-.788.676C39.068 183.651 18.186 294.69 28.43 404.354a2.016 2.016 0 0 0 .765 1.375 487.666 487.666 0 0 0 146.825 74.189 1.9 1.9 0 0 0 2.063-.676A348.2 348.2 0 0 0 208.12 430.4a1.86 1.86 0 0 0-1.019-2.588 321.173 321.173 0 0 1-45.868-21.853 1.885 1.885 0 0 1-.185-3.126 251.047 251.047 0 0 0 9.109-7.137 1.819 1.819 0 0 1 1.9-.256c96.229 43.917 200.41 43.917 295.5 0a1.812 1.812 0 0 1 1.924.233 234.533 234.533 0 0 0 9.132 7.16 1.884 1.884 0 0 1-.162 3.126 301.407 301.407 0 0 1-45.89 21.83 1.875 1.875 0 0 0-1 2.611 391.055 391.055 0 0 0 30.014 48.815 1.864 1.864 0 0 0 2.063.7A486.048 486.048 0 0 0 610.7 405.729a1.882 1.882 0 0 0 .765-1.352c12.264-126.783-20.532-236.912-86.934-334.541zM222.491 337.58c-28.972 0-52.844-26.587-52.844-59.239s23.409-59.241 52.844-59.241c29.665 0 53.306 26.82 52.843 59.239 0 32.654-23.41 59.241-52.843 59.241zm195.38 0c-28.971 0-52.843-26.587-52.843-59.239s23.409-59.241 52.843-59.241c29.667 0 53.307 26.82 52.844 59.239 0 32.654-23.177 59.241-52.844 59.241z"
                            />
                        </svg>
                    )
                }
            </div>
        </div>
    </body>
</html>

<script>
    import { hexColorRegex } from "../utils";

    window.addEventListener("message", ({ data }) => {
        switch (data?.command) {
            case "setTheme":
                const theme = data.theme;
                document.body.classList.toggle(
                    "theme-light",
                    theme === "light"
                );
                document.body.classList.toggle("theme-dark", theme !== "light");
                break;
            case "setColors":
                const { foregroundColor, backgroundColor } = data;

                if (hexColorRegex.test(foregroundColor))
                    document.body.style.setProperty(
                        "--foreground-color",
                        foregroundColor
                    );

                if (hexColorRegex.test(backgroundColor))
                    document.body.style.setProperty(
                        "--background-color",
                        backgroundColor
                    );

                break;
        }
    });
</script>

<style>
    @font-face {
        font-family: gg sans;
        font-style: normal;
        font-display: swap;
        font-weight: 600;
        src: url(/assets/gg-sans-600.woff2) format("woff2");
    }

    .rounded-corners {
        --border-radius: 0.75em;
    }

    .full-banner {
        --banner-height: 120px;
    }

    .theme-dark {
        --background-color: #2b2d31;
        --foreground-color: #f2f3f5;
    }

    .theme-light {
        --background-color: white;
        --foreground-color: #313338;
    }

    .root {
        border-radius: var(--border-radius);
    }

    body {
        margin: 0;
        padding: 0;
        background: transparent;
    }

    .root {
        width: 340px;
    }

    .banner {
        position: relative;
        display: flex;
        flex-direction: column;
        height: var(--banner-height, 48px);
        width: 340px;
        object-fit: cover;
    }

    .banner * {
        position: absolute;
    }

    .color-banner {
        height: 100%;
        width: 100%;
    }

    .banner,
    .banner * {
        border-top-left-radius: var(--border-radius);
        border-top-right-radius: var(--border-radius);
    }

    .banner img {
        height: 100%;
        width: 100%;
        object-fit: cover;
        z-index: 2;
    }

    .profile {
        background: var(--background-color);
        color: var(--foreground-color);

        position: relative;
        display: flex;
        flex-direction: row;
        align-items: center;
        border-bottom-left-radius: var(--border-radius);
        border-bottom-right-radius: var(--border-radius);
    }

    .no-banner .profile {
        border-radius: var(--border-radius);
    }

    .avatar {
        height: 48px;
        width: 48px;
        border-radius: 50%;
        margin: 12px;
    }

    p {
        font-family: "gg sans", system-ui, sans-serif;
        font-size: 20px;
        font-weight: 600;
        line-height: 24px;
        text-rendering: optimizeLegibility;
    }

    svg {
        width: 20px;
        height: 16px;
        position: absolute;
        bottom: 8px;
        right: 8px;
        filter: brightness(0.8);
    }

    .flags img {
        width: 18px;
    }

    .username {
        margin: 8px 0;
    }

    .userinfo {
        display: flex;
        flex-direction: column;
        justify-content: space-evenly;
    }
</style>
